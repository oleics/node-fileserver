#!/usr/bin/env node

// 
// fileserver
// Command line script
// 

//// Configuration

var optionsFile,
    options,
    path = require('path');

if(process.argv[2] != null && isNaN(process.argv[2])) {
  optionsFile = path.resolve(process.argv[2]);
}

// Read options file from disk
try {
  options = require(optionsFile || process.cwd() + '/fileserver-options.js');
} catch(e) {
  if(optionsFile != null) {
    console.log(e);
    process.exit(1);
  }
  options = {};
}

// Set options from command line
options.port = !isNaN(process.argv[2]) ? process.argv[2] : (options.port || 3000);
options.folder = process.argv[3] || options.folder || false;
options.folders = options.folders || [];
options.files = options.files || [];
options.callback = options.callback || function(err){
  if(err) {
    console.error(err.stack || err);
    console.log('\nExiting...');
    process.exit(1);
    return;
  }
  
  console.log('Listening on port '+options.port);
  // console.log(pathmap);
  console.log(Object.keys(pathmap.paths));
};
options.onServerCreate = options.onServerCreate || function(server) {
};
options.onRequest = options.onRequest || function(req, res) {
  res.writeHead(404);
  res.write('Not found');
  res.end();
};

if(options.folder) {
  options.folders.push({folder: options.folder, prefix: ''});
}

//// Runtime

var server = require('../lib/server').createServer(options, options.onRequest),
    pathmap = server.pathmap;

options.onServerCreate(server.server);

// Read 
pathmap.scanFolders(options.folders, function(err, p) {
  if(err) {
    return options.callback(err);
  }
  
  pathmap.addFiles(options.files);
  
  server.server.once('error', function(err) {
    server.server.removeListener('listening', options.callback);
    options.callback(err);
  });
  
  server.server.once('listening', function() {
    server.server.removeListener('error', options.callback);
    options.callback();
  });
  
  server.listen(options.port);
});